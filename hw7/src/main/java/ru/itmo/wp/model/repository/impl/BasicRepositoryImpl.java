package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Model;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BasicRepositoryImpl<T extends Model> {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected abstract String getName();
    protected abstract T toModel(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    private String constructInsertQuery(String[] columnNames) {
        StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO `").append(getName()).append("` (");
        for (Object o : columnNames) {
            sql.append("`").append(o.toString()).append("`, ");
        }
        sql.append("`creationTime`) VALUES (");
        for (int i = 0; i < columnNames.length; i++) sql.append("?, ");
        sql.append("NOW())");
        return sql.toString();
    }

    private T find(long id) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM `" + getName() + "` WHERE id=?")) {
                statement.setLong(1, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toModel(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getName(), e);
        }
    }

    protected List<T> findAllBasic() {
        List<T> res = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + getName() + " ORDER BY id DESC")) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    T model;
                    while ((model = toModel(statement.getMetaData(), resultSet)) != null) {
                        res.add(model);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
        return res;
    }

    protected T findBy(Pair... args) {
        StringBuilder sql = new StringBuilder();
        sql.append("SELECT * FROM ").append(getName()).append(" WHERE ").append(args[0].first).append("=?");
        if (args.length > 1) {
            for (int i = 1; i < args.length; i++) {
                sql.append(" AND ").append(args[i].first).append("=?");
            }
        }
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql.toString())) {
                for (int i = 0; i < args.length; i++) {
                    statement.setObject(i + 1, args[i].second);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toModel(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getName() + ".", e);
        }
    }

    protected void saveBasic(T model, Pair... args) {
        String[] colNames = new String[args.length];
        Object[] vals = new Object[args.length];
        for (int i = 0; i < args.length; i++) {
            colNames[i] = args[i].first;
            vals[i] = args[i].second;
        }
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(constructInsertQuery(colNames),
                    Statement.RETURN_GENERATED_KEYS
            )) {
                for (int i = 0; i < vals.length; i++) {
                    statement.setObject(i + 1, vals[i]);
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + getName());
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        model.setId(generatedKeys.getLong(1));
                        model.setCreationTime(find(model.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save " + getName() + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + getName(), e);
        }
    }

    protected static class Pair {
        String first;
        Object second;

        public Pair(String first, Object second) {
            this.first = first;
            this.second = second;
        }
    }
}
